
package ariba.buyer.vrealm_3;

import java.io.File;
import java.math.BigDecimal;
import java.math.BigInteger;
import java.net.MalformedURLException;
import java.net.URL;
import java.util.Arrays;
import java.util.Date;
import java.util.GregorianCalendar;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import javax.xml.bind.JAXBElement;
import javax.xml.datatype.DatatypeConfigurationException;
import javax.xml.datatype.DatatypeFactory;
import javax.xml.datatype.XMLGregorianCalendar;
import javax.xml.namespace.QName;

import org.apache.cxf.annotations.Logging;
import org.apache.cxf.endpoint.Client;
import org.apache.cxf.frontend.ClientProxy;
import org.apache.cxf.interceptor.LoggingInInterceptor;
import org.apache.cxf.interceptor.LoggingOutInterceptor;
import org.apache.cxf.message.Message;

import ariba.buyer.vrealm_3.RequisitionRequisitionImportPull.DefaultLineItem;
import ariba.buyer.vrealm_3.RequisitionRequisitionImportPull.Preparer;
import ariba.buyer.vrealm_3.RequisitionRequisitionImportPull.Requester;

/**
 * This class was generated by Apache CXF 2.7.17
 * 2015-10-12T17:21:14.701+03:00
 * Generated source version: 2.7.17
 * 
 */
@Logging(limit=16000, inLocation="<stdout>", outLocation="<stdout>")
public final class RequisitionImportPullPortType_RequisitionImportPullPortType_Client {

    private static final QName SERVICE_NAME = new QName("urn:Ariba:Buyer:vrealm_3", "RequisitionImportPull");

    private RequisitionImportPullPortType_RequisitionImportPullPortType_Client() {
    }

	public static RequisitionImportPullReply submitRequisition(URL wsdlURL, PrepareRequisitionParameter parameterRequisition, String authorization)
			throws DatatypeConfigurationException {
		RequisitionImportPull ss = new RequisitionImportPull(wsdlURL, SERVICE_NAME);
        
        RequisitionImportPullPortType port = ss.getRequisitionImportPullPortType(); 
        Client cxfClient = ClientProxy.getClient(port);
        // HTTP headers
        Map<String, List<String>> headers = new HashMap<String, List<String>>();
        headers.put("Authorization", Arrays.asList(authorization));
        
        cxfClient.getRequestContext().put(Message.PROTOCOL_HEADERS, headers);
        cxfClient.getInInterceptors().add(new LoggingInInterceptor());
        cxfClient.getOutInterceptors().add(new LoggingOutInterceptor());
        
        
        System.out.println("Invoking requisitionImportPullOperation...");
        

        RequisitionImportPullRequest _requisitionImportPullOperation_body = prepareRequisition(parameterRequisition);
        
        RequisitionImportPullReply _requisitionImportPullOperation__return = 
        			port.requisitionImportPullOperation(_requisitionImportPullOperation_body);
               
        
        System.out.println("requisitionImportPullOperation.result=" + _requisitionImportPullOperation__return);
        
        return _requisitionImportPullOperation__return;
	}

	private static RequisitionImportPullRequest prepareRequisition(PrepareRequisitionParameter parameterObject) throws DatatypeConfigurationException {
		
		ObjectFactory factory = new ObjectFactory();
		
        RequisitionImportPullRequest _requisitionImportPullOperation_body = 
        		new RequisitionImportPullRequest();
        RequisitionImportPullRequest.RequisitionRequisitionImportPullItem _requisitionRequisitionImportPullItem =
        		new RequisitionImportPullRequest.RequisitionRequisitionImportPullItem();
        RequisitionRequisitionImportPull _requisitionRequisitionImportPull =
        		new RequisitionRequisitionImportPull();
        RequisitionRequisitionImportPull.BusinessUnit _businessUnit =
        		new RequisitionRequisitionImportPull.BusinessUnit();
        JAXBElement<String> _businessUnitUniqueName = 
        		factory.createRequisitionRequisitionImportPullBusinessUnitUniqueName(parameterObject.businessUnit);
        _businessUnit.setUniqueName(_businessUnitUniqueName);
        _requisitionRequisitionImportPull.setBusinessUnit(_businessUnit);
        
        // DefaultLineItem
        DefaultLineItem _defaultLineItem = new DefaultLineItem();
        JAXBElement<String> _defaultLineItemDeliverTo = 
        		factory.createRequisitionRequisitionImportPullDefaultLineItemDeliverTo(parameterObject.deliverTo);
        _defaultLineItem.setDeliverTo(_defaultLineItemDeliverTo);
        GregorianCalendar c = new GregorianCalendar();
        c.setTime(parameterObject.needByDate);
        XMLGregorianCalendar _needByDate = DatatypeFactory.newInstance().newXMLGregorianCalendar(c);
        JAXBElement<XMLGregorianCalendar> _defaultLineItemNeedBy =
        		factory.createRequisitionRequisitionImportPullDefaultLineItemNeedBy(_needByDate);
        _defaultLineItem.setNeedBy(_defaultLineItemNeedBy);
        RequisitionRequisitionImportPull.DefaultLineItem.ShipTo _defaultLineItemShipTo =
        		new RequisitionRequisitionImportPull.DefaultLineItem.ShipTo();
        JAXBElement<String> _defaultLineItemShipToUniqueName = 
        		factory.createRequisitionRequisitionImportPullDefaultLineItemShipToUniqueName(parameterObject.shipTo);
        _defaultLineItemShipTo.setUniqueName(_defaultLineItemShipToUniqueName);
        _defaultLineItem.setShipTo(_defaultLineItemShipTo);
        _requisitionRequisitionImportPull.setDefaultLineItem(_defaultLineItem);
        // -- DefaultLineItem
        
        JAXBElement<String> _importedHeaderCommentStaging = 
        		factory.createRequisitionRequisitionImportPullImportedHeaderCommentStaging(parameterObject.headerComment);
	    _requisitionRequisitionImportPull.setImportedHeaderCommentStaging(_importedHeaderCommentStaging);
	    JAXBElement<Boolean> _importedHeaderExternalCommentStaging = 
        		factory.createRequisitionRequisitionImportPullImportedHeaderExternalCommentStaging(false);
	    _requisitionRequisitionImportPull.setImportedHeaderExternalCommentStaging(_importedHeaderExternalCommentStaging);
	    _requisitionRequisitionImportPull.setName(parameterObject.headerName);
	    JAXBElement<String> _originatingSystem = 
        		factory.createRequisitionRequisitionImportPullOriginatingSystem(parameterObject.originatingSystem);
	    _requisitionRequisitionImportPull.setOriginatingSystem(_originatingSystem);
	    JAXBElement<String> _originatingSystemReferenceID = 
        		factory.createRequisitionRequisitionImportPullOriginatingSystemReferenceID(parameterObject.originatingSystemId);
	    _requisitionRequisitionImportPull.setOriginatingSystem(_originatingSystemReferenceID);
	    Preparer _preparer = new Preparer();
	    _preparer.setPasswordAdapter(parameterObject.passwordAdapter);
	    _preparer.setUniqueName(parameterObject.preparer);
	    _requisitionRequisitionImportPull.setPreparer(_preparer);
	    Requester _requester = new Requester();
	    _requester.setPasswordAdapter("");
	    _requester.setUniqueName(parameterObject.requester);
	    _requisitionRequisitionImportPull.setRequester(_requester);
	    _requisitionRequisitionImportPull.setUniqueName(parameterObject.headerUniqueName);
	    

	    RequisitionRequisitionImportPull.LineItems _lineItems =
        		new RequisitionRequisitionImportPull.LineItems();
	    
	    for (PrepareItemParameter parameterItem : parameterObject.items) {
			RequisitionRequisitionImportPull.LineItems.Item _item = prepareItem(parameterItem);	        
	        _lineItems.getItem().add(_item);
	    }
        
	    _requisitionRequisitionImportPull.setLineItems(_lineItems);
	    	    
        _requisitionRequisitionImportPullItem.getItem().add(_requisitionRequisitionImportPull);
        _requisitionImportPullOperation_body.setRequisitionRequisitionImportPullItem(_requisitionRequisitionImportPullItem);
		return _requisitionImportPullOperation_body;
	}

	private static RequisitionRequisitionImportPull.LineItems.Item prepareItem(PrepareItemParameter parameterObject) throws DatatypeConfigurationException {
		
		ObjectFactory factory = new ObjectFactory();
		
		// Items
	    RequisitionRequisitionImportPull.LineItems.Item _item =
	    		new RequisitionRequisitionImportPull.LineItems.Item();
	    
	    RequisitionRequisitionImportPull.LineItems.Item.CommodityCode _commodityCode =
	    		new RequisitionRequisitionImportPull.LineItems.Item.CommodityCode();
	    _commodityCode.setUniqueName(parameterObject.commodityCode);
	    _item.setCommodityCode(_commodityCode);
	    RequisitionRequisitionImportPull.LineItems.Item.BillingAddress _billingAddress =
	    		new RequisitionRequisitionImportPull.LineItems.Item.BillingAddress();
	    JAXBElement<String> _billingAddressUniqueName = 
        		factory.createRequisitionRequisitionImportPullLineItemsItemBillingAddressUniqueName(parameterObject.billingAddress);
	    _billingAddress.setUniqueName(_billingAddressUniqueName);
	    _item.setBillingAddress(_billingAddress);
	    
	    // Description
	    RequisitionRequisitionImportPull.LineItems.Item.Description _description =
	    		new RequisitionRequisitionImportPull.LineItems.Item.Description();
	    JAXBElement<String> _descriptionManPartNumber = 
        		factory.createRequisitionRequisitionImportPullLineItemsItemDescriptionManPartNumber(parameterObject.manPartNumber);
	    _description.setManPartNumber(_descriptionManPartNumber);
	    JAXBElement<String> _descriptionDescription = 
        		factory.createRequisitionRequisitionImportPullLineItemsItemDescriptionDescription(parameterObject.description);
	    _description.setDescription(_descriptionDescription);
	    RequisitionRequisitionImportPull.LineItems.Item.Description.Price _price =
	    		new RequisitionRequisitionImportPull.LineItems.Item.Description.Price();
	    JAXBElement<BigDecimal> _descriptionPriceAmount = 
        		factory.createRequisitionRequisitionImportPullLineItemsItemDescriptionPriceAmount(new BigDecimal(53.33));
	    _price.setAmount(_descriptionPriceAmount);
	    RequisitionRequisitionImportPull.LineItems.Item.Description.Price.Currency _currency =
	    		new RequisitionRequisitionImportPull.LineItems.Item.Description.Price.Currency();
	    JAXBElement<String> _descriptionPriceCurrencyUniqueName = 
        		factory.createRequisitionRequisitionImportPullLineItemsItemDescriptionPriceCurrencyUniqueName(parameterObject.currency);
	    _currency.setUniqueName(_descriptionPriceCurrencyUniqueName);
	    _price.setCurrency(_currency);
	    _description.setPrice(_price);
	    JAXBElement<String> _descriptionSupplierPartNumber = 
        		factory.createRequisitionRequisitionImportPullLineItemsItemDescriptionSupplierPartNumber(parameterObject.partNumber);
	    _description.setSupplierPartNumber(_descriptionSupplierPartNumber);
	    RequisitionRequisitionImportPull.LineItems.Item.Description.UnitOfMeasure _uniteOfMeasure =
	    		new RequisitionRequisitionImportPull.LineItems.Item.Description.UnitOfMeasure();
	    JAXBElement<String> _descriptionUnitOfMeasureUniqueName = 
        		factory.createRequisitionRequisitionImportPullLineItemsItemDescriptionUnitOfMeasureUniqueName(parameterObject.uom);
	    _uniteOfMeasure.setUniqueName(_descriptionUnitOfMeasureUniqueName);
	    _description.setUnitOfMeasure(_uniteOfMeasure);
	    _item.setDescription(_description);
	    // -- Description
	    
	    
	    _item.setImportedDeliverToStaging(parameterObject.deliverTo);
	    JAXBElement<String> _importedLineCommentStaging = 
        		factory.createRequisitionRequisitionImportPullLineItemsItemImportedLineCommentStaging(parameterObject.itemComment);
	    _item.setImportedLineCommentStaging(_importedLineCommentStaging);
	    JAXBElement<Boolean> _importedLineExternalCommentStaging = 
        		factory.createRequisitionRequisitionImportPullLineItemsItemImportedLineExternalCommentStaging(false);
	    _item.setImportedLineExternalCommentStaging(_importedLineExternalCommentStaging);
	    GregorianCalendar c = new GregorianCalendar();
	    c.setTime(parameterObject.needByDate);
        XMLGregorianCalendar _importedNeedByDate = DatatypeFactory.newInstance().newXMLGregorianCalendar(c);
        JAXBElement<XMLGregorianCalendar> _importedNeedBy =
        		factory.createRequisitionRequisitionImportPullLineItemsItemImportedNeedByStaging(_importedNeedByDate);
        _importedNeedBy.setValue(_importedNeedByDate);
        _item.setImportedNeedByStaging(_importedNeedBy);
        JAXBElement<BigInteger> _numberInCollection = 
        		factory.createRequisitionRequisitionImportPullLineItemsItemNumberInCollection(BigInteger.valueOf(1));
        _item.setNumberInCollection(_numberInCollection);
        JAXBElement<BigInteger> _originatingSystemLineNumber = 
        		factory.createRequisitionRequisitionImportPullLineItemsItemOriginatingSystemLineNumber(BigInteger.valueOf(1));
        _item.setOriginatingSystemLineNumber(_originatingSystemLineNumber);
        JAXBElement<BigDecimal> _quantity = 
        		factory.createRequisitionRequisitionImportPullLineItemsItemQuantity(BigDecimal.valueOf(parameterObject.quantity));
        _item.setQuantity(_quantity);
        RequisitionRequisitionImportPull.LineItems.Item.ShipTo _shipTo =
        		new RequisitionRequisitionImportPull.LineItems.Item.ShipTo();
        JAXBElement<String> _shipToUniqueName = 
        		factory.createRequisitionRequisitionImportPullLineItemsItemShipToUniqueName(parameterObject.shipTo);
        _shipTo.setUniqueName(_shipToUniqueName);
        _item.setShipTo(_shipTo);
        RequisitionRequisitionImportPull.LineItems.Item.Supplier _supplier =
        		new RequisitionRequisitionImportPull.LineItems.Item.Supplier();
        JAXBElement<String> _supplierUniqueName = 
        		factory.createRequisitionRequisitionImportPullLineItemsItemSupplierUniqueName(parameterObject.supplierName);
        _supplier.setUniqueName(_supplierUniqueName);
        _item.setSupplier(_supplier);
        
        // Supplier Location
        RequisitionRequisitionImportPull.LineItems.Item.SupplierLocation _supplierLocation =
        		new RequisitionRequisitionImportPull.LineItems.Item.SupplierLocation();
        JAXBElement<String> _supplierLocationContactID = 
        		factory.createRequisitionRequisitionImportPullLineItemsItemSupplierLocationContactID(parameterObject.supplierContact);
        _supplierLocation.setContactID(_supplierLocationContactID);
        RequisitionRequisitionImportPull.LineItems.Item.SupplierLocation.SetId _supplierLocationSetId =
        		new RequisitionRequisitionImportPull.LineItems.Item.SupplierLocation.SetId();
        JAXBElement<String> _supplierLocationSetIdUniqueName = 
        		factory.createRequisitionRequisitionImportPullLineItemsItemSupplierLocationSetIdUniqueName(parameterObject.supplierSetId);
        _supplierLocationSetId.setUniqueName(_supplierLocationSetIdUniqueName);
        _supplierLocation.setSetId(_supplierLocationSetId);
        JAXBElement<String> _supplierLocationUniqueName = 
        		factory.createRequisitionRequisitionImportPullLineItemsItemSupplierLocationUniqueName(parameterObject.supplierLocation);
        _supplierLocation.setContactID(_supplierLocationUniqueName);
        
        _item.setSupplierLocation(_supplierLocation);
        // -- Supplier Location
		return _item;
	}

}
